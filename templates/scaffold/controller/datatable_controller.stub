<?php

namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_DATATABLES$\$MODEL_NAME$DataTable;
use $NAMESPACE_REQUEST$;
use $NAMESPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$Request;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use Flash;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use Response;
use Rutorika\Html\Http\Select2ableTrait;

class $MODEL_NAME$Controller extends AppBaseController
{
    use Select2ableTrait;
    /** @var  $MODEL_NAME$Repository */
    private $$MODEL_NAME_CAMEL$Repository;
    public $displayAttribute;

    public function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repo)
    {
        $this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;
        $this->displayAttribute = '$MODEL_NAME_CAMEL$';
    }

    protected function getQuery()
    {
        return $this->$MODEL_NAME_CAMEL$Repository->getQuery();
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @param $MODEL_NAME$DataTable $$MODEL_NAME_CAMEL$DataTable
     * @return Response
     */
    public function index($MODEL_NAME$DataTable $$MODEL_NAME_CAMEL$DataTable)
    {
        return $$MODEL_NAME_CAMEL$DataTable->render('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index');
    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @return Response
     */
    public function create()
    {
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create');
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function store(Create$MODEL_NAME$Request $request)
    {
        $input = $request->all();

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->create($input);

        $msg_return = 'Registro salvo com sucesso! :)';

        Flash::success($msg_return);

        if(!request()->ajax())
            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        else
            return response()->json(["message" => $msg_return]);
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function show($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            $msg_return = 'Registro n達o encontrado :(';
            Flash::error($msg_return);

            if(!request()->ajax())
                return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
            else
                return response()->json(["message" => $msg_return],404);
        }

        if(!request()->ajax())
            return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.show')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
        else
            return response()->json(["message" => $msg_return, "data" => $MODEL_NAME_CAMEL$]);

    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function edit($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            $msg_return = 'Registro n達o encontrado :(';
            Flash::error($msg_return);

            if(!request()->ajax())
                return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
            else
                return response()->json(["message" => $msg_return],404);
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param  int              $id
     * @param Update$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function update($id, Update$MODEL_NAME$Request $request)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            $msg_return = 'Registro n達o encontrado :(';
            Flash::error($msg_return);

            if(!request()->ajax())
                return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
            else
                return response()->json(["message" => $msg_return],404);
        }

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->update($request->all(), $id);

        $msg_return = 'Registro atualizado com sucesso! :)';
        Flash::success($msg_return);


        if(!request()->ajax())
            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        else
            return response()->json(["message" => $msg_return, "data" => $$MODEL_NAME_CAMEL$]);
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function destroy($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            $msg_return = 'Registro n達o encontrado :(';
            Flash::error($msg_return);

            if(!request()->ajax())
                return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
            else
                return response()->json(["message" => $msg_return],404);
        }

        $this->$MODEL_NAME_CAMEL$Repository->delete($id);

        $msg_return = 'Registro deletado com sucesso! :)';
        Flash::success($msg_return);

        if(!request()->ajax())
            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        else
            return response()->json(["message" => $msg_return]);
    }
}
